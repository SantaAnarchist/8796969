import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import openai

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# OpenAI API –∫–ª—é—á
openai.api_key = 'your_openai_api_key'

# Telegram Bot Token
TELEGRAM_API_TOKEN = '7500177053:AAFiRUfdEh_zfPBlqLulUb2Vm7chq-mBFaY'
CHANNEL_USERNAME = "@your_channel_username"
REGISTRATION_LINK = "https://1wbapm.life/casino/list?open=register&p=bzbj"
PROMO_CODE = "TAMAEVCS"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = "bot_users.db"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def initialize_database():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            language TEXT,
            is_registered INTEGER DEFAULT 0,
            is_subscribed INTEGER DEFAULT 0,
            chosen_game TEXT
        )
    """)
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_or_update_user(user_id, username, language=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO users (user_id, username, language)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username=excluded.username,
            language=COALESCE(excluded.language, language)
    """, (user_id, username, language))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_status(user_id, column, value):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"""
        UPDATE users SET {column} = ? WHERE user_id = ?
    """, (value, user_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    add_or_update_user(user.id, user.username)
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
         InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π", callback_data='lang_ua')],
        [InlineKeyboardButton("–£–∑–±–µ–∫—Å–∫–∏–π", callback_data='lang_uz'),
         InlineKeyboardButton("–•–∏–Ω–¥–∏", callback_data='lang_hi')],
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='lang_en'),
         InlineKeyboardButton("–ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data='lang_es')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã –≤–∑–ª–æ–º–∞–ª–∏ –∫–∞–∑–∏–Ω–æ 1win —á–µ—Ä–µ–∑ ChatGPT! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=reply_markup
    )

# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    language = query.data.split('_')[1]
    update_user_status(query.from_user.id, "language", language)
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ 1win", url=REGISTRATION_LINK)]
    ]
    await query.edit_message_text(
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ. "
        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {PROMO_CODE}. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /verify.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    bot = context.bot

    if not await check_subscription(user_id, bot):
        await update.message.reply_text(
            f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    update_user_status(user_id, "is_registered", 1)
    update_user_status(user_id, "is_subscribed", 1)
    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Mines Game", callback_data='game_mines')],
            [InlineKeyboardButton("Lucky Jet", callback_data='game_lucky_jet')]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    game = query.data.split('_')[1]
    update_user_status(query.from_user.id, "chosen_game", game)
    if game == 'mines':
        instruction = "–í—ã –≤—ã–±—Ä–∞–ª–∏ Mines Game. –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2024-12-24 14:30'."
    elif game == 'lucky_jet':
        instruction = "–í—ã –≤—ã–±—Ä–∞–ª–∏ Lucky Jet. –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2024-12-24 14:30'."
    await query.edit_message_text(instruction)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    prompt = (
        f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∏–≥—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ 1win. –¢–≤–æ—è —Ä–æ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è. "
        f"–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ '—è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å'. "
        f"–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å. "
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_input}. "
        f"–ü—Ä–æ—Å—Ç–æ —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –≥–¥–µ –ª–µ–∂–∞—Ç –º–∏–Ω—ã."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}]
        )
        answer = response['choices'][0]['message']['content']
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = 123456789  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
    if update.effective_user.id != admin_id:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_registered = 1")
    total_registered = cursor.fetchone()[0]

    cursor.execute("SELECT language, COUNT(*) FROM users GROUP BY language")
    language_stats = cursor.fetchall()

    cursor.execute("SELECT chosen_game, COUNT(*) FROM users WHERE chosen_game IS NOT NULL GROUP BY chosen_game")
    game_stats = cursor.fetchall()
    conn.close()

    stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" \
                    f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_registered}\n\n" \
                    f"–Ø–∑—ã–∫–∏:\n"
    for lang, count in language_stats:
        stats_message += f" - {lang}: {count}\n"

    stats_message += "\n–ò–≥—Ä—ã:\n"
    for game, count in game_stats:
        stats_message += f" - {game}: {count}\n"

    await update.message.reply_text(stats_message)

# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = 123456789  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
    if update.effective_user.id != admin_id:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789")
        return

    try:
        user_id_to_delete = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id_to_delete,))
    conn.commit()
    rows_deleted = cursor.rowcount
    conn.close()

    if rows_deleted > 0:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    initialize_database()

    application = Application.builder().token(TELEGRAM_API_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(choose_language, pattern='^lang_'))
    application.add_handler(CommandHandler("verify", verify))
    application.add_handler(CallbackQueryHandler(choose_game, pattern='^game_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_input))

    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("delete_user", delete_user))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
